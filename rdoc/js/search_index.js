var search_data = {"index":{"searchIndex":["buby","bubyarraywrapper","httprequestresponsehelper","httprequestresponselist","scanissuehelper","scanissueslist","object","[]()","_check_and_callback()","_check_cb()","activate!()","active_scan()","addtositemap()","add_to_site_map()","alert()","burp_callbacks()","burp_extender()","burp_loaded?()","burp_version()","close()","config()","config=()","doactivescan()","dopassivescan()","do_active_scan()","do_passive_scan()","each()","evt_application_closing()","evt_command_line_args()","evt_extender_init()","evt_http_message()","evt_proxy_message()","evt_proxy_message_raw()","evt_register_callbacks()","evt_scan_issue()","excludefromscope()","exclude_from_scope()","exclude_scope()","exitsuite()","exit_suite()","first()","getburpversion()","getheaders()","getparameters()","getproxyhistory()","getscanissues()","getsitemap()","get_headers()","get_parameters()","get_proxy_history()","get_scan_issues()","get_site_map()","harvest_cookies_from_history()","headers()","http_messages()","implant()","implant()","implanted?()","implanted?()","in_scope?()","includeinscope()","include_in_scope()","include_scope()","intruder()","isinscope()","is_in_scope()","issuealert()","issue_alert()","last()","length()","libpath()","loadconfig()","load_burp()","load_config()","makehttprequest()","make_http_request()","make_request()","messages()","new()","new()","new()","new()","parameters()","passive_scan()","path()","proxy_history()","proxy_interception=()","proxy_interception_enabled()","registermenuitem()","register_menu_item()","repeater()","req_body()","req_headers()","req_str()","request_body()","request_headers()","request_str()","request_string()","require_all_libs_relative_to()","response_body()","response_headers()","response_str()","response_string()","restorestate()","restore_state()","rsp_body()","rsp_headers()","rsp_str()","saveconfig()","savestate()","save_config()","save_state()","scan_issues()","search_proxy_history()","sendtointruder()","sendtorepeater()","sendtospider()","send_to_intruder()","send_to_repeater()","send_to_spider()","setproxyinterceptionenabled()","site_map()","size()","spider()","start_burp()","start_burp()","uri()","uri()","with_proxy_history()","with_site_map()","with_statefile()","history","readme","buby"],"longSearchIndex":["buby","buby::bubyarraywrapper","buby::httprequestresponsehelper","buby::httprequestresponselist","buby::scanissuehelper","buby::scanissueslist","object","buby::bubyarraywrapper#[]()","buby#_check_and_callback()","buby#_check_cb()","buby#activate!()","buby#active_scan()","buby#addtositemap()","buby#add_to_site_map()","buby#alert()","buby#burp_callbacks()","buby#burp_extender()","buby::burp_loaded?()","buby#burp_version()","buby#close()","buby#config()","buby#config=()","buby#doactivescan()","buby#dopassivescan()","buby#do_active_scan()","buby#do_passive_scan()","buby::bubyarraywrapper#each()","buby#evt_application_closing()","buby#evt_command_line_args()","buby#evt_extender_init()","buby#evt_http_message()","buby#evt_proxy_message()","buby#evt_proxy_message_raw()","buby#evt_register_callbacks()","buby#evt_scan_issue()","buby#excludefromscope()","buby#exclude_from_scope()","buby#exclude_scope()","buby#exitsuite()","buby#exit_suite()","buby::bubyarraywrapper#first()","buby#getburpversion()","buby#getheaders()","buby#getparameters()","buby#getproxyhistory()","buby#getscanissues()","buby#getsitemap()","buby#get_headers()","buby#get_parameters()","buby#get_proxy_history()","buby#get_scan_issues()","buby#get_site_map()","buby#harvest_cookies_from_history()","buby#headers()","buby::scanissuehelper#http_messages()","buby::httprequestresponsehelper::implant()","buby::scanissuehelper::implant()","buby::httprequestresponsehelper::implanted?()","buby::scanissuehelper::implanted?()","buby#in_scope?()","buby#includeinscope()","buby#include_in_scope()","buby#include_scope()","buby#intruder()","buby#isinscope()","buby#is_in_scope()","buby#issuealert()","buby#issue_alert()","buby::bubyarraywrapper#last()","buby::bubyarraywrapper#length()","buby::libpath()","buby#loadconfig()","buby::load_burp()","buby#load_config()","buby#makehttprequest()","buby#make_http_request()","buby#make_request()","buby::scanissuehelper#messages()","buby::new()","buby::bubyarraywrapper::new()","buby::httprequestresponselist::new()","buby::scanissueslist::new()","buby#parameters()","buby#passive_scan()","buby::path()","buby#proxy_history()","buby#proxy_interception=()","buby#proxy_interception_enabled()","buby#registermenuitem()","buby#register_menu_item()","buby#repeater()","buby::httprequestresponsehelper#req_body()","buby::httprequestresponsehelper#req_headers()","buby::httprequestresponsehelper#req_str()","buby::httprequestresponsehelper#request_body()","buby::httprequestresponsehelper#request_headers()","buby::httprequestresponsehelper#request_str()","buby::httprequestresponsehelper#request_string()","buby::require_all_libs_relative_to()","buby::httprequestresponsehelper#response_body()","buby::httprequestresponsehelper#response_headers()","buby::httprequestresponsehelper#response_str()","buby::httprequestresponsehelper#response_string()","buby#restorestate()","buby#restore_state()","buby::httprequestresponsehelper#rsp_body()","buby::httprequestresponsehelper#rsp_headers()","buby::httprequestresponsehelper#rsp_str()","buby#saveconfig()","buby#savestate()","buby#save_config()","buby#save_state()","buby#scan_issues()","buby#search_proxy_history()","buby#sendtointruder()","buby#sendtorepeater()","buby#sendtospider()","buby#send_to_intruder()","buby#send_to_repeater()","buby#send_to_spider()","buby#setproxyinterceptionenabled()","buby#site_map()","buby::bubyarraywrapper#size()","buby#spider()","buby#start_burp()","buby::start_burp()","buby::httprequestresponsehelper#uri()","buby::scanissuehelper#uri()","buby#with_proxy_history()","buby#with_site_map()","buby#with_statefile()","","",""],"info":[["Buby","","Buby.html","","<p>Buby is a mash-up of the commercial security testing web proxy PortSwigger \nBurp Suite(tm) allowing you …\n"],["Buby::BubyArrayWrapper","","Buby/BubyArrayWrapper.html","",""],["Buby::HttpRequestResponseHelper","","Buby/HttpRequestResponseHelper.html","",""],["Buby::HttpRequestResponseList","","Buby/HttpRequestResponseList.html","",""],["Buby::ScanIssueHelper","","Buby/ScanIssueHelper.html","",""],["Buby::ScanIssuesList","","Buby/ScanIssuesList.html","",""],["Object","","Object.html","",""],["[]","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-5B-5D","(*args)",""],["_check_and_callback","Buby","Buby.html#method-i-_check_and_callback","(meth, *args)","<p>This method is a __send__ callback gate for the IBurpExtenderCallbacks\nreference. It first checks to …\n"],["_check_cb","Buby","Buby.html#method-i-_check_cb","()","<p>Internal method to check for the existence of the burp_callbacks reference\nbefore doing anything with …\n"],["activate!","Buby","Buby.html#method-i-activate-21","()","<p>Makes this handler the active Ruby handler object for the BurpExtender Java\nruntime. (there can be only …\n"],["active_scan","Buby","Buby.html#method-i-active_scan","(host, port, https, req, ip_off)",""],["addToSiteMap","Buby","Buby.html#method-i-addToSiteMap","(item)","<p>This method can be used to add an item to Burp’s site map with the\nspecified request/response details. …\n"],["add_to_site_map","Buby","Buby.html#method-i-add_to_site_map","(item)",""],["alert","Buby","Buby.html#method-i-alert","(msg)",""],["burp_callbacks","Buby","Buby.html#method-i-burp_callbacks","()","<p>Returns the internal reference to the IBupExtenderCallbacks instance. This\nreference gets set from Java …\n"],["burp_extender","Buby","Buby.html#method-i-burp_extender","()","<p>Returns the internal reference to the BurpExtender instance. This reference\ngets set from Java through …\n"],["burp_loaded?","Buby","Buby.html#method-c-burp_loaded-3F","()","<p>Checks the Java namespace to see if Burp has been loaded.\n"],["burp_version","Buby","Buby.html#method-i-burp_version","()",""],["close","Buby","Buby.html#method-i-close","(prompt_user=false)",""],["config","Buby","Buby.html#method-i-config","()",""],["config=","Buby","Buby.html#method-i-config-3D","(conf)",""],["doActiveScan","Buby","Buby.html#method-i-doActiveScan","(host, port, https, req, ip_off)","<p>Send an HTTP request to the Burp Scanner tool to perform an active \nvulnerability scan.\n\n<pre>* host = The hostname ...</pre>\n"],["doPassiveScan","Buby","Buby.html#method-i-doPassiveScan","(host, port, https, req, rsp)","<p>Send an HTTP request and response to the Burp Scanner tool to perform a \npassive vulnerability scan. …\n"],["do_active_scan","Buby","Buby.html#method-i-do_active_scan","(host, port, https, req, ip_off)",""],["do_passive_scan","Buby","Buby.html#method-i-do_passive_scan","(host, port, https, req, rsp)",""],["each","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-each","()",""],["evt_application_closing","Buby","Buby.html#method-i-evt_application_closing","()","<p>This method is called by BurpExtender right before closing the application.\nImplementations can use this …\n"],["evt_command_line_args","Buby","Buby.html#method-i-evt_command_line_args","(args)","<p>This method is called by the BurpExtender implementation Burp startup. The\nargs parameter contains main()‘s …\n"],["evt_extender_init","Buby","Buby.html#method-i-evt_extender_init","(ext)","<p>This method is called by the BurpExtender java implementation upon \ninitialization of the BurpExtender …\n"],["evt_http_message","Buby","Buby.html#method-i-evt_http_message","(tool_name, is_request, message_info)","<p>This method is invoked whenever any of Burp’s tools makes an HTTP request \nor receives a response. This …\n"],["evt_proxy_message","Buby","Buby.html#method-i-evt_proxy_message","(msg_ref, is_req, rhost, rport, is_https, http_meth, url, resourceType, status, req_content_type, message, action)","<p>This method is called by BurpExtender while proxying HTTP messages and\nbefore passing them through the …\n"],["evt_proxy_message_raw","Buby","Buby.html#method-i-evt_proxy_message_raw","(msg_ref, is_req, rhost, rport, is_https, http_meth, url, resourceType, status, req_content_type, message, action)","<p>Seems we need to specifically render our ‘message’ to a string here in\nruby. Otherwise there’s flakiness …\n"],["evt_register_callbacks","Buby","Buby.html#method-i-evt_register_callbacks","(cb)","<p>This method is called by BurpExtender on startup to register Burp’s \nIBurpExtenderCallbacks interface …\n"],["evt_scan_issue","Buby","Buby.html#method-i-evt_scan_issue","(issue)","<p>This method is invoked whenever Burp Scanner discovers a new, unique \nissue, and can be used to perform …\n"],["excludeFromScope","Buby","Buby.html#method-i-excludeFromScope","(url)","<p>Exclude the specified URL from the Suite-wide scope.\n\n<pre>* url = The URL to exclude from the Suite-wide scope.</pre>\n"],["exclude_from_scope","Buby","Buby.html#method-i-exclude_from_scope","(url)",""],["exclude_scope","Buby","Buby.html#method-i-exclude_scope","(url)",""],["exitSuite","Buby","Buby.html#method-i-exitSuite","(prompt_user=false)","<p>Shuts down Burp programatically. If the method returns the user cancelled\nthe shutdown prompt.\n"],["exit_suite","Buby","Buby.html#method-i-exit_suite","(prompt_user=false)",""],["first","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-first","()",""],["getBurpVersion","Buby","Buby.html#method-i-getBurpVersion","()","<p>This method can be used to determine the version of the loaded burp at\nruntime. This is included in the …\n"],["getHeaders","Buby","Buby.html#method-i-getHeaders","(msg)","<p>Parses a raw HTTP message (request or response ) and returns an associative\narray containing the headers …\n"],["getParameters","Buby","Buby.html#method-i-getParameters","(req)","<p>Parses a raw HTTP request message and returns an associative array \ncontaining parameters as they are …\n"],["getProxyHistory","Buby","Buby.html#method-i-getProxyHistory","()","<p>Returns a Java array of IHttpRequestResponse objects pulled directly from \nthe Burp proxy history.\n"],["getScanIssues","Buby","Buby.html#method-i-getScanIssues","(urlprefix=nil)","<p>This method returns all of the current scan issues for URLs matching the \nspecified literal prefix.  …\n"],["getSiteMap","Buby","Buby.html#method-i-getSiteMap","(urlprefix=nil)","<p>Returns a Java array of IHttpRequestResponse objects pulled directly from \nthe Burp site map for all …\n"],["get_headers","Buby","Buby.html#method-i-get_headers","(msg)",""],["get_parameters","Buby","Buby.html#method-i-get_parameters","(req)",""],["get_proxy_history","Buby","Buby.html#method-i-get_proxy_history","()",""],["get_scan_issues","Buby","Buby.html#method-i-get_scan_issues","(urlprefix=nil)",""],["get_site_map","Buby","Buby.html#method-i-get_site_map","(urlprefix=nil)",""],["harvest_cookies_from_history","Buby","Buby.html#method-i-harvest_cookies_from_history","(cookie=nil, urlrx=nil, statefile=nil)","<p>Harvest cookies from a session’s proxy history.\n<p>Params:\n\n<pre>cookie    = optional: name of cookie to harvest ...</pre>\n"],["headers","Buby","Buby.html#method-i-headers","(msg)",""],["http_messages","Buby::ScanIssueHelper","Buby/ScanIssueHelper.html#method-i-http_messages","()",""],["implant","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-c-implant","(base)","<p>one-shot method to implant ourselves onto a target object’s class interface\nin ruby. All later instances …\n"],["implant","Buby::ScanIssueHelper","Buby/ScanIssueHelper.html#method-c-implant","(base)","<p>one-shot method to implant ourselves onto a target object’s class interface\nin ruby. All later instances …\n"],["implanted?","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-c-implanted-3F","()",""],["implanted?","Buby::ScanIssueHelper","Buby/ScanIssueHelper.html#method-c-implanted-3F","()",""],["in_scope?","Buby","Buby.html#method-i-in_scope-3F","(url)",""],["includeInScope","Buby","Buby.html#method-i-includeInScope","(url)","<p>Include the specified URL in the Suite-wide scope.\n\n<pre>* url = The URL to exclude in the Suite-wide scope.</pre>\n"],["include_in_scope","Buby","Buby.html#method-i-include_in_scope","(url)",""],["include_scope","Buby","Buby.html#method-i-include_scope","(url)",""],["intruder","Buby","Buby.html#method-i-intruder","(host, port, https, req, ip_off)",""],["isInScope","Buby","Buby.html#method-i-isInScope","(url)","<p>Query whether a specified URL is within the current Suite-wide scope.\n\n<pre>* url = The URL to query</pre>\n<p>Returns: …\n"],["is_in_scope","Buby","Buby.html#method-i-is_in_scope","(url)",""],["issueAlert","Buby","Buby.html#method-i-issueAlert","(msg)","<p>Display a message in the Burp Suite alerts tab.\n\n<pre>* msg =  The alert message to display.</pre>\n"],["issue_alert","Buby","Buby.html#method-i-issue_alert","(msg)",""],["last","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-last","()",""],["length","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-length","()",""],["libpath","Buby","Buby.html#method-c-libpath","( *args )","<p>Returns the library path for the module. If any arguments are given, they\nwill be joined to the end of …\n"],["loadConfig","Buby","Buby.html#method-i-loadConfig","(conf)","<p>This method causes Burp to load a new configuration from the Map of\nname/value Strings provided. Any …\n"],["load_burp","Buby","Buby.html#method-c-load_burp","(jar_path)","<p>Attempts to load burp with require and confirm it provides the required \nclass in the Java namespace. …\n"],["load_config","Buby","Buby.html#method-i-load_config","(conf)",""],["makeHttpRequest","Buby","Buby.html#method-i-makeHttpRequest","(host, port, https, req)","<p>Issue an arbitrary HTTP request and retrieve its response\n\n<pre>* host  = The hostname of the remote HTTP server. ...</pre>\n"],["make_http_request","Buby","Buby.html#method-i-make_http_request","(host, port, https, req)",""],["make_request","Buby","Buby.html#method-i-make_request","(host, port, https, req)",""],["messages","Buby::ScanIssueHelper","Buby/ScanIssueHelper.html#method-i-messages","()",""],["new","Buby","Buby.html#method-c-new","(other=nil)",""],["new","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-c-new","(obj)",""],["new","Buby::HttpRequestResponseList","Buby/HttpRequestResponseList.html#method-c-new","(obj)",""],["new","Buby::ScanIssuesList","Buby/ScanIssuesList.html#method-c-new","(obj)",""],["parameters","Buby","Buby.html#method-i-parameters","(req)",""],["passive_scan","Buby","Buby.html#method-i-passive_scan","(host, port, https, req, rsp)",""],["path","Buby","Buby.html#method-c-path","( *args )","<p>Returns the lpath for the module. If any arguments are given, they will be\njoined to the end of the path …\n"],["proxy_history","Buby","Buby.html#method-i-proxy_history","()",""],["proxy_interception=","Buby","Buby.html#method-i-proxy_interception-3D","(enabled)",""],["proxy_interception_enabled","Buby","Buby.html#method-i-proxy_interception_enabled","(enabled)",""],["registerMenuItem","Buby","Buby.html#method-i-registerMenuItem","(menuItemCaption, menuItemHandler)","<p>This method can be used to register a new menu item which will appear  on\nthe various context menus that …\n"],["register_menu_item","Buby","Buby.html#method-i-register_menu_item","(menuItemCaption, menuItemHandler)",""],["repeater","Buby","Buby.html#method-i-repeater","(host, port, https, req, tab=nil)",""],["req_body","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-req_body","()",""],["req_headers","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-req_headers","()",""],["req_str","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-req_str","()",""],["request_body","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-request_body","()","<p>Returns the request message body or an empty string if there is none.\n"],["request_headers","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-request_headers","()","<p>Returns a split array of headers. Example:\n\n<pre>[\n  [&quot;GET / HTTP/1.1&quot;],\n  [&quot;Host&quot;, &quot;www.example.org&quot;],\n  [&quot;User-Agent&quot;, ...</pre>\n"],["request_str","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-request_str","()","<p>Returns the full request as a Ruby String - returns an empty string if \nrequest is nil.\n"],["request_string","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-request_string","()",""],["require_all_libs_relative_to","Buby","Buby.html#method-c-require_all_libs_relative_to","( fname, dir = nil )","<p>Utility method used to require all files ending in .rb that lie in the\ndirectory below this file that …\n"],["response_body","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-response_body","()","<p>Returns the message body of the response, minus headers\n"],["response_headers","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-response_headers","()","<p>returns an array of response headers split into header name and value.  For\nexample:\n\n<pre>[ \n  [&quot;HTTP/1.1 301 ...</pre>\n"],["response_str","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-response_str","()","<p>returns the response as a Ruby String object - returns an empty string if\nresponse is nil.\n"],["response_string","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-response_string","()",""],["restoreState","Buby","Buby.html#method-i-restoreState","(filename)","<p>Restores Burp session state from a previously saved state file. See also:\nsaveState\n<p>IMPORTANT: This method …\n"],["restore_state","Buby","Buby.html#method-i-restore_state","(filename)",""],["rsp_body","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-rsp_body","()",""],["rsp_headers","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-rsp_headers","()",""],["rsp_str","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-rsp_str","()",""],["saveConfig","Buby","Buby.html#method-i-saveConfig","()","<p>This method causes Burp to save all of its current configuration as a Map\nof name/value Strings.\n<p>@return …\n"],["saveState","Buby","Buby.html#method-i-saveState","(filename)","<p>Saves the current Burp session to a state file. See also restoreState.\n<p>IMPORTANT: This method is only …\n"],["save_config","Buby","Buby.html#method-i-save_config","()",""],["save_state","Buby","Buby.html#method-i-save_state","(filename)",""],["scan_issues","Buby","Buby.html#method-i-scan_issues","(urlprefix=nil)",""],["search_proxy_history","Buby","Buby.html#method-i-search_proxy_history","(statefile=nil, urlrx=nil)","<p>Searches the proxy history for the url’s matched by the specified  regular\nexpression (returns them all …\n"],["sendToIntruder","Buby","Buby.html#method-i-sendToIntruder","(host, port, https, req, ip_off)","<p>Send an HTTP request to the Burp Intruder tool\n\n<pre>* host  = The hostname of the remote HTTP server.\n* port ...</pre>\n"],["sendToRepeater","Buby","Buby.html#method-i-sendToRepeater","(host, port, https, req, tab=nil)","<p>Send an HTTP request to the Burp Repeater tool.\n\n<pre>* host  = The hostname of the remote HTTP server.\n* port ...</pre>\n"],["sendToSpider","Buby","Buby.html#method-i-sendToSpider","(url)","<p>Send a seed URL to the Burp Spider tool.\n\n<pre>* url = The new seed URL to begin spidering from.</pre>\n"],["send_to_intruder","Buby","Buby.html#method-i-send_to_intruder","(host, port, https, req, ip_off)",""],["send_to_repeater","Buby","Buby.html#method-i-send_to_repeater","(host, port, https, req, tab=nil)",""],["send_to_spider","Buby","Buby.html#method-i-send_to_spider","(url)",""],["setProxyInterceptionEnabled","Buby","Buby.html#method-i-setProxyInterceptionEnabled","(enabled)","<p>This method sets the interception mode for Burp Proxy.\n<p>@param enabled Indicates whether interception of …\n"],["site_map","Buby","Buby.html#method-i-site_map","(urlprefix=nil)",""],["size","Buby::BubyArrayWrapper","Buby/BubyArrayWrapper.html#method-i-size","()",""],["spider","Buby","Buby.html#method-i-spider","(url)",""],["start_burp","Buby","Buby.html#method-i-start_burp","(args=[])","<p>Prepares the java BurpExtender implementation with a reference to self as\nthe module handler and launches …\n"],["start_burp","Buby","Buby.html#method-c-start_burp","(h_class=nil, init_args=nil, args=nil)","<p>Starts burp using a supplied handler class,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h_class</span> = <span class=\"ruby-constant\">Buby</span> <span class=\"ruby-keyword\">or</span> <span class=\"ruby-identifier\">a</span> <span class=\"ruby-identifier\">derived</span> <span class=\"ruby-keyword\">class</span>. <span class=\"ruby-identifier\">instance</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">which</span> <span class=\"ruby-identifier\">will</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["uri","Buby::HttpRequestResponseHelper","Buby/HttpRequestResponseHelper.html#method-i-uri","()","<p>Returns a Ruby URI object derived from the java.net.URL object\n"],["uri","Buby::ScanIssueHelper","Buby/ScanIssueHelper.html#method-i-uri","()","<p>Returns a Ruby URI object derived from the java.net.URL object\n"],["with_proxy_history","Buby","Buby.html#method-i-with_proxy_history","(statefile=nil)","<p>This is a convenience wrapper which can load a given burp state file and \nlets its caller to perform …\n"],["with_site_map","Buby","Buby.html#method-i-with_site_map","(urlprefix=nil, statefile=nil)","<p>This is a convenience wrapper which can load a given burp state file and \nlets its caller to perform …\n"],["with_statefile","Buby","Buby.html#method-i-with_statefile","(statefile=nil)","<p>This is a convenience wrapper which loads a given burp statefile and lets\nits caller perform actions …\n"],["History","","History_txt.html","","<p>1.2.1 / 2011-01-27\n\n<pre>* Fixed burp -v to print version... somewhat</pre>\n<p>1.2.0 / 2010-08-29\n"],["README","","README_rdoc.html","","<p>buby\n\n<pre>by Eric Monti, Timur Duehr\nhttp://tduehr.github.com/buby</pre>\n<p>DESCRIPTION:\n"],["buby","","bin/buby.html","","<p>#!/usr/bin/env jruby\n<p>require ‘buby’ require ‘irb’ require ‘optparse’\n<p>args = {}\n"]]}}